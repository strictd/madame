import { Http, Headers, Response } from '@angular/http';
import { Observer } from 'rxjs/Observer';
import { Observable } from 'rxjs/Observable';
import { AuthHttp } from 'angular2-jwt';
import { IServerInfo, IServerList, IHeaderList, IMadameQuery, IMadameQue } from './models/madame';
import 'rxjs/add/operator/share';
export declare class MadameService {
    serverList: IServerList;
    http: Http;
    authHttp: AuthHttp;
    loginObserv: Observer<any>;
    madameInterval: Observable<any>;
    runningQue: boolean;
    madameCounter: number;
    _que: Observable<any>;
    que: Observer<any>;
    queStash: IMadameQue[];
    _needsAuth: Observer<boolean>;
    needsAuth: Observable<any>;
    _runningCount: number;
    _running: Observer<boolean>;
    running: Observable<any>;
    reauthObservable: Observable<any>;
    constructor(_http: Http, _authHttp: AuthHttp);
    setServer(server: string, url: string, host?: string, cookie?: string): void;
    initServer(url?: string, host?: string, cookie?: string): IServerInfo;
    setHost(server: string, host: string, cookie?: string): void;
    setCookie(server: string, cookie: string): void;
    setLoginObserver(observer: Observer<any>): void;
    getAuthHook(): Observable<boolean>;
    getRunningHook(): Observable<boolean>;
    getServers(): IServerList;
    getServer(server: string): IServerInfo;
    getURL(server: string): string;
    getCookie(server: string): string;
    getHost(server: string): string;
    get(url: string, server?: string, headers?: IHeaderList): Observable<Response>;
    post(url: string, data: Object, server?: string, headers?: IHeaderList): Observable<Response>;
    put(url: string, data: Object, server?: string, headers?: IHeaderList): Observable<Response>;
    delete(url: string, server?: string, headers?: IHeaderList): Observable<Response>;
    authGet(url: string, server?: string, headers?: IHeaderList): Observable<Response>;
    authPost(url: string, data: Object, server?: string, headers?: IHeaderList): Observable<Response>;
    authPut(url: string, data: Object, server?: string, headers?: IHeaderList): Observable<Response>;
    authDelete(url: string, server?: string, headers?: IHeaderList): Observable<Response>;
    createAuthQueryFromMethod(query: IMadameQuery): Observable<Response>;
    queueMadame(query: IMadameQuery): any;
    tryQue(que: IMadameQue): void;
    rerunQueStash(): void;
    reauthMadame(): void;
    updateRunningCount(by: number): void;
    clearQue(): void;
    defaultHeaders(toAdd?: IHeaderList): Headers;
    addHeaders(toAdd: IHeaderList, cur?: Headers): Headers;
    queryString(obj: any): string;
}
